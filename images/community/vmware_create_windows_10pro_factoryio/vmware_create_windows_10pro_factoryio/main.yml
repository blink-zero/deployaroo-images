---
# Playbook: vmware_create_windows_10pro_factoryio
# Version: 1.0
# Date: 2024-06-22
# Author: blink-zero
# Description: This playbook automates the deployment of a Windows virtual machine template with FactoryIO installed and a custom factory scene including a conveyor belt.

- name: Deploy Windows Template
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"       # vCenter server hostname
    username: "{{ vcenter_username }}"       # vCenter server username
    password: "{{ vcenter_password }}"       # vCenter server password
    validate_certs: "{{ vcenter_validate_certs }}"  # Whether to validate SSL certificates
    datacenter: "{{ vcenter_datacenter }}"   # Datacenter name
    name: "{{ guest_hostname }}"             # Name of the new virtual machine
    folder: "{{ vm_folder }}"                # Folder in which to create the VM
    state: "{{ vm_state }}"                  # Desired state of the VM (present/absent)
    guest_id: "{{ vm_guestid }}"             # Guest OS identifier
    esxi_hostname: "{{ esxi_host }}"         # ESXi host on which to deploy the VM
    template: "{{ template_name }}"          # Name of the template to use for the VM
    disk:
      - size_gb: "{{ win_disk_size }}"       # Size of the VM disk in GB
        type: "{{ vm_type }}"                # Disk type (thin/thick)
        datastore: "{{ vm_disk_datastore }}" # Datastore for the VM disk
    hardware:
      memory_mb: "{{ guest_vram }}"          # Memory size in MB
      num_cpus: "{{ guest_vcpu }}"           # Number of CPUs
      scsi: "{{ vm_hw_scsi }}"               # SCSI controller type
    networks:
      - name: "{{ vm_net_name }}"            # Network name
        ip: "{{ inventory_hostname }}"       # IP address of the VM
        netmask: "{{ netmask }}"             # Network mask
        gateway: "{{ gateway }}"             # Gateway address
    customization:
      autologon: true                        # Enable autologon
      autologoncount: 1                      # Number of times to autologon
      hostname: "{{ guest_hostname }}"       # Hostname of the VM
      dns_servers:
        - "{{ dns1 }}"                       # Primary DNS server
        - "{{ dns2 }}"                       # Secondary DNS server
      timezone: "{{ timezone }}"             # Timezone setting
      password: "{{ windows_template_password }}"  # Windows administrator password
      runonce:                               # Commands to run once at first logon
        - cmd /c echo New-NetFirewallRule -DisplayName "WinRM 5985" -Direction Inbound -LocalPort 5985 -Protocol TCP -RemoteAddress Any -Action Allow > C:\enable_winrm.ps1
        - powershell.exe -ExecutionPolicy Unrestricted -File C:\enable_winrm.ps1 -ForceNewSSLCert -EnableCredSSP
    wait_for_customization: yes              # Wait for customization to complete
    wait_for_ip_address: True                # Wait for the IP address to be assigned
  delegate_to: localhost

- name: Add host to Ansible inventory
  add_host:
    name: '{{ inventory_hostname }}'         # Hostname of the new VM
    ansible_user: '.\{{ windows_template_username }}'  # Windows username
    ansible_password: '{{ windows_template_password }}'  # Windows password
    ansible_connection: winrm                # Connection type
    ansible_winrm_transport: ntlm            # WinRM transport protocol
    ansible_winrm_server_cert_validation: ignore  # Ignore server certificate validation
    ansible_winrm_port: 5985                 # WinRM port

- name: Wait for system to become reachable over WinRM
  wait_for_connection:
    timeout: 900                             # Timeout in seconds
  delegate_to: '{{ inventory_hostname }}'

- name: Download FactoryIO (264MB)
  win_get_url:
    url: "https://realgames.b-cdn.net/fio/factoryio-installer-latest.exe"  # URL of FactoryIO installer
    dest: "C:/factoryio-installer-latest.exe"                              # Destination path
  delegate_to: '{{ inventory_hostname }}'

- name: Install FactoryIO
  win_command: "C:/factoryio-installer-latest.exe --mode unattended"  # Command to run the installer in unattended mode
  args:
    chdir: "C:/"                          # Change to C: drive directory
  register: factoryio_install             # Register the result
  delegate_to: '{{ inventory_hostname }}'
  async: 900                              # Run the task asynchronously with a timeout of 900 seconds
  poll: 0                                 # Do not wait for task completion

- name: Create PowerShell script to install .NET Framework 3.5
  win_copy:
    content: |
      Start-Process powershell -ArgumentList 'Enable-WindowsOptionalFeature -Online -FeatureName NetFx3 -All' -Verb runAs  # PowerShell command to install .NET Framework 3.5
    dest: C:\install_dotnet.ps1           # Destination path of the script
  delegate_to: '{{ inventory_hostname }}'

- name: Run PowerShell script to install .NET Framework 3.5
  win_shell: powershell.exe -File C:\install_dotnet.ps1  # Command to run the PowerShell script
  register: dotnet_install                   # Register the result
  delegate_to: '{{ inventory_hostname }}'

- name: Create directory for Conveyor.factoryio
  win_file:
    path: "C:/Users/Administrator/Documents/Factory IO/My Scenes"  # Path of the directory
    state: directory                      # Ensure the directory is present
  delegate_to: '{{ inventory_hostname }}'

- name: Download Conveyor.factoryio
  win_get_url:
    url: "https://github.com/TravisAnde/fio-conveyor/raw/main/Conveyor.factoryio"  # URL of Conveyor.factoryio file
    dest: "C:/Users/Administrator/Documents/Factory IO/My Scenes/Conveyor.factoryio"  # Destination path
  delegate_to: '{{ inventory_hostname }}'
